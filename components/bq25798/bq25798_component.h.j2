#pragma once

#include "esphome/core/component.h"
#include "esphome/components/sensor/sensor.h"
#include "esphome/components/binary_sensor/binary_sensor.h"
#include "esphome/components/text_sensor/text_sensor.h"
#include "esphome/components/i2c/i2c.h"

// Relative path to the BQ25798 library because this file is in the "lib" folder on the same level as the "src" folder which PlatformIO's library manager uses to find libraries.
#include "../lib/BQ25798NoI2C/BQ25798NoI2C.h"

#include <cinttypes>

namespace esphome {
namespace bq25798 {

class BQ25798Component : public PollingComponent, public i2c::I2CDevice {
 public:
  void setup() override;
  void dump_config() override;
  float get_setup_priority() const override;
  void update() override;
  
{%- for def in settings %}

{%-     if def.mode == "rw" %}
  void on_init_set_{{ def.name | lower }}(bool value);
{%-       if def.type == "bool" %}
  void set_{{ def.name | lower }}(bool value, bool write_to_i2c);
{%-       elif def.type == "int" %}
  void set_{{ def.name | lower }}(int value, bool write_to_i2c);
{%-       elif def.type == "float" %}
  void set_{{ def.name | lower }}(float value, bool write_to_i2c);
{%-       elif def.type == "enum" %}
  void set_{{ def.name | lower }}(int value, bool write_to_i2c);
{%-       endif %}
{%-     endif %}

{%-     if def.type == "bool" %}
  void set_{{ def.name | lower }}_sensor(binary_sensor::BinarySensor *sensor) { {{ def.name | lower }}_sensor_ = sensor; }
{%-     elif def.type == "int" %}
  void set_{{ def.name | lower }}_sensor(sensor::Sensor *sensor) { {{ def.name | lower }}_sensor_ = sensor; }
{%-     elif def.type == "float" %}
  void set_{{ def.name | lower }}_sensor(sensor::Sensor *sensor) { {{ def.name | lower }}_sensor_ = sensor; }
{%-     elif def.type == "enum" %}
  void set_{{ def.name | lower }}_sensor(sensor::Sensor *sensor) { {{ def.name | lower }}_sensor_ = sensor; }
  void set_{{ def.name | lower }}_text_sensor(text_sensor::TextSensor *sensor) { {{ def.name | lower }}_text_sensor_ = sensor; }
{%-     endif %}
{% endfor %}

 protected:
{%- for def in settings %}

{%-     if def.mode == "rw" %}
  bool on_init_set_{{ def.name | lower }}_ = false;
{%-         if def.type == "bool" %}
  bool {{ def.name | lower }}_ = false;
{%-         elif def.type == "int" %}
  int {{ def.name | lower }}_ = 0;
{%-         elif def.type == "float" %}
  float {{ def.name | lower }}_ = 0.0f;
{%-         elif def.type == "enum" %}
  int {{ def.name | lower }}_ = 0;
{%-         endif %}
{%-     endif %}

{%-     if def.type == "bool" %}
  binary_sensor::BinarySensor *{{ def.name | lower }}_sensor_ {nullptr};
{%-     elif def.type == "int" %}
  sensor::Sensor *{{ def.name | lower }}_sensor_ {nullptr};
{%-     elif def.type == "float" %}
  sensor::Sensor *{{ def.name | lower }}_sensor_ {nullptr};
{%-     elif def.type == "enum" %}
  sensor::Sensor *{{ def.name | lower }}_sensor_ {nullptr};
  text_sensor::TextSensor *{{ def.name | lower }}_text_sensor_ {nullptr};
{%-     endif %}

{% endfor %}

  private:
    BQ25798NoI2C *bq25798_noi2c {nullptr};
};  // class BQ25798Component

}  // namespace bq25798
}  // namespace esphome