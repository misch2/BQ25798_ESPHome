{% include "/globals.j2" %}

#pragma once

#include "esphome/core/component.h"
#include "esphome/components/sensor/sensor.h"
#include "esphome/components/binary_sensor/binary_sensor.h"
#include "esphome/components/text_sensor/text_sensor.h"
#include "esphome/components/i2c/i2c.h"

// Relative path to the BQ25798 library because this file is in the "lib" folder on the same level as the "src" folder which PlatformIO's library manager uses to find libraries.
#include "../lib/BQ25798NoI2C/BQ25798NoI2C.h"

#include <cinttypes>

namespace esphome {
namespace bq25798 {

class BQ25798Component : public PollingComponent, public i2c::I2CDevice {

 public:
  void setup() override;
  void dump_config() override;
  float get_setup_priority() const override;
  void update() override;

{% for def in settings %}
  // {{ def.name }} - {{ def.description }}
{# Setters #}
{%     if def.mode == "rw" %}
  void on_init_set_{{ def.name_snakecase }}(bool value);
{%       if def.type == "bool" %}
  void set_{{ def.name_snakecase }}(bool value, bool write_to_i2c);
{%       elif def.type == "int" %}
  void set_{{ def.name_snakecase }}(int value, bool write_to_i2c);
{%       elif def.type == "float" %}
  void set_{{ def.name_snakecase }}(float value, bool write_to_i2c);
{%       elif def.type == "enum" %}
  void set_{{ def.name_snakecase }}(int value, bool write_to_i2c);
{%       endif %}
{%     endif %}
{# Getters #}
{%     if def.type == "bool" %}
  bool get_{{ def.name_snakecase }}(bool read_from_i2c);
{%         if def.is_flag %}
  void clear_flag_{{ def.name_snakecase }}() { this->last_value_{{ def.name_snakecase }}_ = false; }
  void raise_flag_{{ def.name_snakecase }}() { this->last_value_{{ def.name_snakecase }}_ = true; }
{%         endif %}
{%     elif def.type == "int" %}
  int get_{{ def.name_snakecase }}(bool read_from_i2c);
{%     elif def.type == "float" %}
  float get_{{ def.name_snakecase }}(bool read_from_i2c);
{%     elif def.type == "enum" %}
  int get_{{ def.name_snakecase }}(bool read_from_i2c);
  const char* get_{{ def.name_snakecase }}_string(bool read_from_i2c);
{%     endif %}

{% endfor -%}

 protected:
{% for def in settings %}
{# #}
{%         if def.type == "bool" %}
  bool last_value_{{ def.name_snakecase }}_ = false;
{%         elif def.type == "int" %}
  int last_value_{{ def.name_snakecase }}_ = 0;
{%         elif def.type == "float" %}
  float last_value_{{ def.name_snakecase }}_ = 0.0f;
{%         elif def.type == "enum" %}
  int last_value_{{ def.name_snakecase }}_ = 0;
{%         endif %}
{# #}
{%     if def.mode == "rw" %}
  bool on_init_set_{{ def.name_snakecase }}_ = false;
{%     endif %}
{# #}

{% endfor -%}

    BQ25798NoI2C *bq25798_noi2c_ {nullptr};
};  // class BQ25798Component

}  // namespace bq25798
}  // namespace esphome