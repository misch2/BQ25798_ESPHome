{% include "/globals.j2" %}

#pragma once

#include "esphome/core/component.h"
#include "esphome/components/sensor/sensor.h"
#include "esphome/components/binary_sensor/binary_sensor.h"
#include "esphome/components/text_sensor/text_sensor.h"
#include "esphome/components/i2c/i2c.h"

// Relative path to the BQ25798 library because this file is in the "lib" folder on the same level as the "src" folder which PlatformIO's library manager uses to find libraries.
#include "../lib/BQ25798NoI2C/BQ25798NoI2C.h"

#include <cinttypes>

namespace esphome {
namespace bq25798 {

class BQ25798Component : public PollingComponent, public i2c::I2CDevice {

 public:
  void setup() override;
  void dump_config() override;
  float get_setup_priority() const override;
  void update() override;

{% for def in settings %}
  // {{ def.name }} - {{ def.description }}
{# #}
{# Getters #}
{# #}
  uint16_t get_{{ def._snake_case_name }}_raw(bool read_from_i2c);
{%     if def._is_bool %}
  bool get_{{ def._snake_case_name }}_bool(bool read_from_i2c);
{%         if def.is_flag %}
  void clear_flag_{{ def._snake_case_name }}() { this->last_raw_value_{{ def._snake_case_name }}_ = 0; }
  void raise_flag_{{ def._snake_case_name }}() { this->last_raw_value_{{ def._snake_case_name }}_ = 1; }
{%         endif %}
{%     endif %}
{%     if def._is_int %}
  int get_{{ def._snake_case_name }}_int(bool read_from_i2c);
{%     endif %}
{%     if def._is_float %}
  float get_{{ def._snake_case_name }}_float(bool read_from_i2c);
{%     endif %}
{%     if def._is_enum %}
  int get_{{ def._snake_case_name }}_enum_int(bool read_from_i2c);
  const char* get_{{ def._snake_case_name }}_enum_string(bool read_from_i2c);
{%     endif %}
{# #}
{# Setters #}
{# #}
{%     if def._is_rw %}
  void set_{{ def._snake_case_name }}_raw(uint16_t value, bool read_from_i2c);
{%       if def._is_bool %}
  void set_{{ def._snake_case_name }}_bool(bool value, bool write_to_i2c);
{%       endif %}
{%       if def._is_int %}
  void set_{{ def._snake_case_name }}_int(int value, bool write_to_i2c);
{%       endif %}
{%       if def._is_float %}
  void set_{{ def._snake_case_name }}_float(float value, bool write_to_i2c);
{%       endif %}
{%       if def._is_enum %}
  void set_{{ def._snake_case_name }}_enum_int(int value, bool write_to_i2c);
{%       endif %}
{%     endif %}

{% endfor -%}

 protected:
{% for def in settings %}
  uint16_t last_raw_value_{{ def._snake_case_name }}_ = 0;
{% endfor %}

  BQ25798NoI2C *bq25798_noi2c_ {nullptr};
};  // class BQ25798Component

}  // namespace bq25798
}  // namespace esphome