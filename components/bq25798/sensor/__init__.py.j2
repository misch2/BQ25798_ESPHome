import esphome.codegen as cg
import esphome.config_validation as cv
from esphome import core
from esphome.components import sensor
from esphome.const import (
    CONF_ID,
    DEVICE_CLASS_TEMPERATURE,
    DEVICE_CLASS_VOLTAGE,
    DEVICE_CLASS_CURRENT,
    STATE_CLASS_MEASUREMENT,
    UNIT_CELSIUS,
    UNIT_MILLIAMP,
    UNIT_PERCENT,
)

from .. import (
    CONF_BQ25798_ID,
    BQ25798_CLIENT_SCHEMA,
    bq25798_ns, 
)

DEPENDENCIES = ["bq25798"]

BQ25798Sensor = bq25798_ns.class_("BQ25798Sensor", cg.Component)

# Numeric settings including the enums
{% for def in settings %}
{%     if def.type == "int" or def.type == "float" or def.type == "enum" %}
CONF_BQ25798_{{ def.name}} = "{{ def.name | lower }}"
{%     endif %}                    
{% endfor %}

{% for def in settings %}
{%     if def.type == "enum" %}
ENUM_BQ25798_{{ def.name}} = {
{%         for enum in def.enum_constants %}
    "{{ enum }}": {{ loop.index0 }},
{%         endfor %}
}
{%     endif %}
{% endfor %}

CONFIG_SCHEMA = (
    cv.Schema(
        {
            cv.GenerateID(): cv.declare_id(BQ25798Sensor),

{% for def in settings %}
{%     if def.type == "int" or def.type == "float" or def.type == "enum" %}
            cv.Optional(CONF_BQ25798_{{ def.name}}): sensor.sensor_schema(
{%         if def.unit == "mV" %}
                unit_of_measurement="mV",   # FIXME
                device_class=DEVICE_CLASS_VOLTAGE,
                accuracy_decimals=0,
{%         elif def.unit == "mA" %}
                unit_of_measurement=UNIT_MILLIAMP,
                device_class=DEVICE_CLASS_CURRENT,
                accuracy_decimals=0,
{%         elif def.unit == "degC" %}
                unit_of_measurement=UNIT_CELSIUS,
                device_class=DEVICE_CLASS_TEMPERATURE,
                accuracy_decimals=2,
{%         elif def.unit == "%" %}
                unit_of_measurement=UNIT_PERCENT,
                accuracy_decimals=2,
{%         endif %}
                state_class=STATE_CLASS_MEASUREMENT,
            ),
{%     endif %}            
{% endfor %}
        }
    )
    .extend(BQ25798_CLIENT_SCHEMA)
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])

    await cg.register_component(var, config)
    parent = await cg.get_variable(config[CONF_BQ25798_ID])

    # Sensors
{% for def in settings %}
{%     if def.type == "int" or def.type == "float" or def.type == "enum" %}
    if {{ def.name | lower }} := config.get(CONF_BQ25798_{{ def.name }}):
        sens = await sensor.new_sensor({{ def.name | lower }})
        cg.add(parent.assign_sensor_{{ def.name | lower }}(sens))
{%     endif %}                    
{% endfor %}
