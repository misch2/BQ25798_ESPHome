{% include "/globals.j2" -%}

import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import sensor
from esphome.const import (
    CONF_ID,
    DEVICE_CLASS_TEMPERATURE,
    DEVICE_CLASS_VOLTAGE,
    DEVICE_CLASS_CURRENT,
    STATE_CLASS_MEASUREMENT,
    UNIT_CELSIUS,
    UNIT_MILLIAMP,
    UNIT_PERCENT,
)

from .. import (
    CONF_BQ25798_ID,
    bq25798_ns,
    BQ25798Component
)

DEPENDENCIES = ["bq25798"]

BQ25798Sensor = bq25798_ns.class_("BQ25798Sensor", sensor.Sensor, cg.PollingComponent)

# Numeric settings including the enums
{% for def in settings %}
{%     if def._is_ha_sensor %}
CONF_BQ25798_{{ def._UPPERCASE_NAME }} = "{{ def._snake_case_name }}"
{%     endif %}
{% endfor %}

{% for def in settings %}
{%     if def._is_enum %}
ENUM_BQ25798_{{ def.name}} = {
{%         for enum in def.enum_constants %}
    "{{ enum }}": {{ loop.index0 }},
{%         endfor %}
}
{%     endif %}
{% endfor %}

CONFIG_SCHEMA = (
    sensor.sensor_schema(BQ25798Sensor)
    .extend(
        {
            cv.GenerateID(CONF_BQ25798_ID): cv.use_id(BQ25798Component),

{% for def in settings %}
{%     if def._is_ha_sensor %}
            cv.Optional(CONF_BQ25798_{{ def._UPPERCASE_NAME }}): sensor.sensor_schema(
{%         if def.unit == "mV" %}
                unit_of_measurement="mV",
                device_class=DEVICE_CLASS_VOLTAGE,
                accuracy_decimals=0,
{%         elif def.unit == "mA" %}
                unit_of_measurement=UNIT_MILLIAMP,
                device_class=DEVICE_CLASS_CURRENT,
                accuracy_decimals=0,
{%         elif def.unit == "degC" %}
                unit_of_measurement=UNIT_CELSIUS,
                device_class=DEVICE_CLASS_TEMPERATURE,
                accuracy_decimals=2,
{%         elif def.unit == "%" %}
                unit_of_measurement=UNIT_PERCENT,
                accuracy_decimals=2,
{%         endif %}
                state_class=STATE_CLASS_MEASUREMENT,
            ),
{%     endif %}
{% endfor %}
        }
    )
    .extend(cv.polling_component_schema("5s"))
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_parented(var, config[CONF_BQ25798_ID])
    await cg.register_component(var, config)

{% for def in settings %}
{%     if def._is_ha_sensor %}
    if {{ def._snake_case_name }} := config.get(CONF_BQ25798_{{ def._UPPERCASE_NAME }}):
        sens = await sensor.new_sensor({{ def._snake_case_name }})
        cg.add(var.assign_sensor_{{ def._snake_case_name }}(sens))
{%     endif %}
{% endfor %}
