import esphome.codegen as cg
import esphome.config_validation as cv
from esphome import core
from esphome.components import binary_sensor
from esphome.const import (
    CONF_ID,
)

from .. import (
    CONF_BQ25798_ID,
    BQ25798_CLIENT_SCHEMA,
    bq25798_ns, 
)

DEPENDENCIES = ["bq25798"]

BQ25798BinarySensor = bq25798_ns.class_("BQ25798BinarySensor", cg.Component)

# Boolean settings
{%- for def in settings %}
{%-     if def.type == "bool" %}
CONF_BQ25798_{{ def.name}} = "{{ def.name | lower }}"
{%-     endif %}                    
{%- endfor %}

CONFIG_SCHEMA = (
    cv.Schema(
        {
            cv.GenerateID(): cv.declare_id(BQ25798BinarySensor),

{%- for def in settings %}
{%-     if def.type == "bool" %}
            cv.Optional(CONF_BQ25798_{{ def.name}}): binary_sensor.binary_sensor_schema(),
{%-     endif %}            
{%- endfor %}
        }
    )
    .extend(BQ25798_CLIENT_SCHEMA)
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])

    await cg.register_component(var, config)
    parent = await cg.get_variable(config[CONF_BQ25798_ID])

    # Sensors
{%- for def in settings %}
{%-     if def.type == "bool" %}
    if {{ def.name | lower }} := config.get(CONF_BQ25798_{{ def.name }}):
        sens = await binary_sensor.new_binary_sensor({{ def.name | lower }})
        cg.add(parent.set_{{ def.name | lower }}_binary_sensor(sens))
{%-     endif %}                    
{%- endfor %}
