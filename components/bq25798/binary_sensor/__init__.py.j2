{% include "/globals.j2" -%}

import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import binary_sensor
from esphome.const import (
    CONF_ID,
)

from .. import (
    CONF_BQ25798_ID,
    bq25798_ns,
    BQ25798Component
)

DEPENDENCIES = ["bq25798"]

BQ25798BinarySensor = bq25798_ns.class_("BQ25798BinarySensor", binary_sensor.BinarySensor, cg.PollingComponent)

# Boolean settings
{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
CONF_BQ25798_{{ def._UPPERCASE_NAME }} = "{{ def._snake_case_name }}"
{%     endif %}
{% endfor %}

# See https://www.home-assistant.io/integrations/binary_sensor/#device-class for the list of binary sensor device classes

# Usable ones:
# '',                  =       on / off
# 'battery',           =      low / normal               OK = FALSE
# 'battery_charging',  = charging / not charging
# 'cold',              =     cold / normal               OK = FALSE
# 'heat',              =      hot / normal               OK = FALSE
# 'power',             =       on / off                  OK = TRUE
# 'problem',           =  problem / ok                   OK = FALSE
# 'running',           =  running / not running
# 'safety',            =   unsafe / safe                 OK = FALSE
# 'tamper',            = tampered / clear                OK = FALSE

CONFIG_SCHEMA = (
    binary_sensor.binary_sensor_schema(BQ25798BinarySensor)
    .extend(
        {
            cv.GenerateID(CONF_BQ25798_ID): cv.use_id(BQ25798Component),            

{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
            cv.Optional(CONF_BQ25798_{{ def._UPPERCASE_NAME }}): binary_sensor.binary_sensor_schema(
{%         if def.ha_device_class != "" %}
#TODO               device_class="{{ def.ha_device_class }}",
{%         endif %}
            ),
{%     endif %}
{% endfor %}
        }
    )
    .extend(cv.polling_component_schema("1s"))
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_parented(var, config[CONF_BQ25798_ID])
    await cg.register_component(var, config)

{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
    if {{ def._snake_case_name }} := config.get(CONF_BQ25798_{{ def._UPPERCASE_NAME }}):
        sens = await binary_sensor.new_binary_sensor({{ def._snake_case_name }})
        cg.add(var.assign_binary_sensor_{{ def._snake_case_name }}(sens))
{%     endif %}
{% endfor %}
