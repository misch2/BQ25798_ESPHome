{% include "/globals.j2" %}

#include "bq25798_binary_sensor.h"

#include "esphome/core/log.h"

namespace esphome {
namespace bq25798 {

static const char* const TAG = "bq25798.binary_sensor";

float BQ25798BinarySensor::get_setup_priority() const { return setup_priority::DATA; }

void BQ25798BinarySensor::dump_config() {
  ESP_LOGCONFIG(TAG, "Dumping BQ25798BinarySensor configuration...");
{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
  if (this->binary_sensor_{{ def._snake_case_name }}_ != nullptr) {
    LOG_BINARY_SENSOR("  ", "{{ def.name }}", this->binary_sensor_{{ def._snake_case_name }}_);
  }
{%     endif %}
{% endfor %}
  LOG_UPDATE_INTERVAL(this);
}

void BQ25798BinarySensor::update() {
{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
  if (this->binary_sensor_{{ def._snake_case_name }}_ != nullptr) {
{%         if def._is_flag %}
    this->binary_sensor_{{ def._snake_case_name }}_->publish_state(this->parent_->get_cached_flag_{{ def._snake_case_name }}());
{%         else %}
    this->binary_sensor_{{ def._snake_case_name }}_->publish_state(this->parent_->get_{{ def._snake_case_name }}_bool(true));
{%         endif %}
  }
{%     endif %}
{% endfor %}
}

{% for def in settings %}
{%     if def._is_ha_binary_sensor %}
void BQ25798BinarySensor::assign_binary_sensor_{{ def._snake_case_name }}(binary_sensor::BinarySensor *sensor) {
  this->binary_sensor_{{ def._snake_case_name }}_ = sensor;
}
{%     endif %}
{% endfor %}

}  // namespace bq25798
}  // namespace esphome