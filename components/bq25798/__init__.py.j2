import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import i2c
from esphome.const import CONF_ID

DEPENDENCIES = ["i2c"]

bq25798_ns = cg.esphome_ns.namespace("bq25798")
BQ25798Component = bq25798_ns.class_("BQ25798Component", cg.Component, i2c.I2CDevice)

{%- for def in settings %}
CONF_{{ def.name}} = "{{ def.name | lower }}"
{%- endfor %}

{%- for def in settings %}
{%-     if def.type == "enum" %}
ENUM_{{ def.name}} = {
{%-         for enum in def.enum_constants %}
    "{{ enum }}": {{ loop.index0 }},
{%-         endfor %}
}
{%-     endif %}
{%- endfor %}


CONFIG_SCHEMA = (
    cv.Schema(
        {
            cv.GenerateID(): cv.declare_id(BQ25798Component),
{%- for def in settings %}
{%-     if def.type == "bool" %}
            cv.Optional(CONF_{{ def.name}}): cv.boolean,
{%-     elif def.type == "int" %}
            cv.Optional(CONF_{{ def.name}}): cv.int_,
{%-     elif def.type == "float" %}
            cv.Optional(CONF_{{ def.name}}): cv.float_,
{%-     elif def.type == "enum" %}
            cv.Optional(CONF_{{ def.name}}): cv.enum(ENUM_{{def.name}}),
{%-     endif %}
{%- endfor %}

            cv.Optional(CONF_VSYSMIN): cv.positive_int,
        }
    )
    .extend(cv.COMPONENT_SCHEMA)
    .extend(i2c.i2c_device_schema(0x01))    # FIXME
)


async def to_code(config):
    cg.add_library(
        name="BQ25798",
        repository="https://github.com/misch2/BQ25798_Library",
        version=None,
    )

    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_component(var, config)
    await i2c.register_i2c_device(var, config)
