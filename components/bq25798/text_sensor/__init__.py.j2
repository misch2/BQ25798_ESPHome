import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import text_sensor
from esphome.const import (
    CONF_ID,
)

from .. import (
    CONF_BQ25798_ID,
    bq25798_ns,
    BQ25798Component
)

DEPENDENCIES = ["bq25798"]

BQ25798TextSensor = bq25798_ns.class_("BQ25798TextSensor", text_sensor.TextSensor, cg.PollingComponent)

# Enum settings
{% for def in settings %}
{%     if def.type == "enum" %}
CONF_BQ25798_{{ def.name}} = "{{ def.name | lower }}"
{%     endif %}                    
{% endfor %}

CONFIG_SCHEMA = (
    text_sensor.text_sensor_schema(BQ25798TextSensor)
    .extend(
        {
            cv.GenerateID(CONF_BQ25798_ID): cv.use_id(BQ25798Component),

{% for def in settings %}
{%     if def.type == "enum" %}
            cv.Optional(CONF_BQ25798_{{ def.name}}): text_sensor.text_sensor_schema(),
{%     endif %}            
{% endfor %}
        }
    )
    .extend(cv.polling_component_schema("5s"))
)

async def to_code(config):
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_parented(var, config[CONF_BQ25798_ID])
    await cg.register_component(var, config)

    # Sensors
{% for def in settings %}
{%     if def.type == "enum" %}
    if {{ def.name | lower }} := config.get(CONF_BQ25798_{{ def.name }}):
        sens = await text_sensor.new_text_sensor({{ def.name | lower }})
        cg.add(var.assign_text_sensor_{{ def.name | lower }}(sens))
{%     endif %}                    
{% endfor %}
