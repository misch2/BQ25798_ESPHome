{% include "/globals.j2" -%}

#include "bq25798_component.h"
#include "esphome/core/log.h"
#include "esphome/core/hal.h"

#include <array>
#include <map>

namespace esphome {
namespace bq25798 {

static const char* TAG = "bq25798.component";

{% for def in settings %}
{%     if def._is_enum %}
static const std::map<uint8_t, std::string> {{ def._snake_case_name }}_int_to_enum {
{%         for enum in def.enum_constants %}
  { {{ loop.index0 }}, "{{ enum }}" },
{%         endfor %}
};

static const std::map<std::string, uint8_t> {{ def._snake_case_name }}_enum_to_int {
{%         for enum in def.enum_constants %}
  { "{{ enum }}", {{ loop.index0 }} },
{%         endfor %}
};
{%    endif %}
{% endfor %}

void BQ25798Component::setup() {
  ESP_LOGCONFIG(TAG, "Setting up BQ25798...");

  this->bq25798_noi2c_ = new BQ25798NoI2C();
  this->bq25798_noi2c_->begin(this->address_); // no-op

  this->clear_registers();
  this->update(); // read the registers

  int pn = get_pn_enum_int();
  if (pn != static_cast<int>(BQ25798NoI2C::PN_t::PN_BQ25798)) {
    ESP_LOGE(TAG, "BQ25798 chip not found at address 0x%02X. Read signature: %d", this->address_, pn);
    this->clear_registers();
    this->mark_failed();
    return;
  }

  int dev_rev = get_dev_rev_enum_int();
  if (dev_rev != static_cast<int>(BQ25798NoI2C::DEV_REV_t::DEV_REV_BQ25798)) {
    ESP_LOGE(TAG, "BQ25798 chip at address 0x%02X has unexpected device revision: %d", this->address_, dev_rev);
    this->clear_registers();
    this->mark_failed();
    return;
  }

// Never reset the chip automatically in setup, as it may interfere with charging, OTG or other operations.
//  ESP_LOGCONFIG(TAG, "Resetting the chip...");
//  this->set_reg_rst_bool(true);
//  while (this->get_reg_rst_bool()) {
//    this->update(); // read the registers again
//    delay(10); // wait for the chip to reset
//  }
//  ESP_LOGCONFIG(TAG, "Chip reset complete.");

  ESP_LOGCONFIG(TAG, "BQ25798 read successfully at address 0x%02X", this->address_);
}

void BQ25798Component::dump_config() {
  ESP_LOGCONFIG(TAG, "Dumping BQ25798 configuration...");
  if (this->is_failed()) {
    return;
  }
  LOG_I2C_DEVICE(this);
  LOG_UPDATE_INTERVAL(this);
}

float BQ25798Component::get_setup_priority() const { return setup_priority::DATA; }

{% set registers_count = registers | length %}
static std::array<uint8_t, {{ registers_count }}> _reg_values = {
{%- for reg in registers -%}
    0{% if not loop.last %}, {% endif %}
{% endfor %}
};

static const std::map<uint8_t, uint8_t> _regaddr_to_index = {
{% for reg in registers %}
    { {{ reg.name }}, {{ loop.index0 }} }{% if not loop.last %}, {% endif %}

{% endfor %}
};

static const std::map<uint8_t, uint8_t> _regindex_to_addr = {
{% for reg in registers %}
    { {{ loop.index0 }}, {{ reg.name }} }{% if not loop.last %}, {% endif %}

{% endfor %}
};

void BQ25798Component::update() {
  if (this->is_failed() || this->bq25798_noi2c_ == nullptr) {
    return;
  }

  // Read all registers
//  ESP_LOGD(TAG, "Reading all registers to cache");
  for (int i = 0; i < {{ registers_count }}; i++) {
    if (!this->read_byte(_regindex_to_addr.at(i), &_reg_values[i])) {
      ESP_LOGE(TAG, "Failed to read register 0x%02X", _regindex_to_addr.at(i));
      this->clear_registers();
//       this->mark_failed();
      return;
    }
  }

  // No, watchdog reset can easily be implemented in the ESPHome yaml loop
  // Refresh watchdog timer
  // this->set_wd_rst_bool(true);
}

// To visibly indicate that the component is not ready to use, we clear all registers
void BQ25798Component::clear_registers() {
  ESP_LOGV(TAG, "Clearing all cached registers");
  for (int i = 0; i < {{ registers_count }}; i++) {
    _reg_values[i] = 0;
  }
}

{% for def in settings %}
// {{ def.name }} - {{ def.description }}
uint16_t BQ25798Component::get_{{ def._snake_case_name }}_raw() {
  if (this->is_failed() || this->bq25798_noi2c_ == nullptr) {
    return 0;
  }

  uint8_t reg_addr = _regaddr_to_index.at({{ def.regname }});
{%     if def.long_reg %}
  uint16_t reg_value = (_reg_values[ reg_addr ] << 8) |
                        _reg_values[ reg_addr + 1 ];
{%     else %}
  uint8_t reg_value = _reg_values[ reg_addr ];
//  ESP_LOGD(TAG, "Getting register {{ def.regname }} (0x%02X): 0x%02X", reg_addr, reg_value);
{%     endif %}
  return (reg_value >> {{ def.shift }}) & BITLENGTH_TO_MASK({{ def.bits }});
}

{%     if def._is_rw %}
void BQ25798Component::set_{{ def._snake_case_name }}_raw(uint16_t raw_value) {
  if (this->is_failed() || this->bq25798_noi2c_ == nullptr) {
    return;
  }

//  ESP_LOGD(TAG, " Setting {{ def.name }} to raw 0x%04X", raw_value);
  uint8_t reg_addr = _regaddr_to_index.at({{ def.regname }});
{%         if def.long_reg %}
  uint16_t reg_value = (_reg_values[ reg_addr ] << 8) |
                        _reg_values[ reg_addr + 1 ];
  reg_value &= ~(BITLENGTH_TO_MASK({{ def.bits }}) << {{ def.shift }});
  reg_value |= ((raw_value & BITLENGTH_TO_MASK({{ def.bits }})) << {{ def.shift }});
  _reg_values[ reg_addr ] = reg_value >> 8;
  _reg_values[ reg_addr + 1 ] = reg_value & 0xFF;

//  ESP_LOGD(TAG, "  Writing register {{ def.regname }} (0x%02X): 0x%02X 0x%02X", reg_addr, _reg_values[ reg_addr ], _reg_values[ reg_addr + 1 ]);
  if (!this->write_byte_16({{ def.regname }}, reg_value)) {
    ESP_LOGE(TAG, "Failed to write register 0x%02X", reg_addr);
    this->clear_registers();
//     this->mark_failed();
  }
{%         else %}
  uint8_t reg_value = _reg_values[ reg_addr ];
  reg_value &= ~(BITLENGTH_TO_MASK({{ def.bits }}) << {{ def.shift }});
  reg_value |= ((raw_value & BITLENGTH_TO_MASK({{ def.bits }})) << {{ def.shift }});
  _reg_values[ reg_addr ] = reg_value;

//  ESP_LOGD(TAG, "  Writing register {{ def.regname }} (0x%02X): 0x%02X", reg_addr, reg_value);
  if (!this->write_byte({{ def.regname }}, reg_value)) {
    ESP_LOGE(TAG, "Failed to write register 0x%02X", reg_addr);
    this->clear_registers();
//     this->mark_failed();
  }
{%         endif %}
}

{%     endif %}
{# #}
{%         if def._is_flag %}
bool BQ25798Component::get_{{ def._snake_case_name }}_flag() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  // ESP_LOGD(TAG, "Read {{ def.name }} flag: raw=0x%04X", raw);

  bool val = this->bq25798_noi2c_->rawToBool(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to bool/flag for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }

  // This is a workaround for the fact that the BQ25798 clears the flag registers on read so we can't just read them and keep them raised too
  if (val) {  // only set the flag if it is on. All the flags need to be cleared explicitly
    ESP_LOGD(TAG, "  {{ def.name }}: raising cached flag");
    this->raise_flag_{{ def._snake_case_name }}();
  }

  // Always return the value of the flag, never the current register value
  val = this->last_{{ def._snake_case_name }}_;
//  ESP_LOGD(TAG, "  {{ def.name }}: returning %s", val ? "true" : "false");
  return val;
}

{%         endif %}
{# #}
{%         if def._is_bool %}
bool BQ25798Component::get_{{ def._snake_case_name }}_bool() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  bool bool_val = this->bq25798_noi2c_->rawToBool(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to bool for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }
  return bool_val;
}

{%         endif %}
{# #}
{%         if def._is_int %}
int BQ25798Component::get_{{ def._snake_case_name }}_int() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  int int_val = this->bq25798_noi2c_->rawToInt(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to int for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }
  return int_val;
}

{%         endif %}
{# #}
{%         if def._is_float %}
float BQ25798Component::get_{{ def._snake_case_name }}_float() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  float float_val = this->bq25798_noi2c_->rawToFloat(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to float for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }
  return float_val;
}

{%         endif %}
{# #}
{%         if def._is_enum %}
int BQ25798Component::get_{{ def._snake_case_name }}_enum_int() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  int int_val = this->bq25798_noi2c_->rawToInt(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to enum int for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }
  return int_val;
}
const char* BQ25798Component::get_{{ def._snake_case_name }}_enum_string() {
  uint16_t raw = get_{{ def._snake_case_name }}_raw();
  const char* string_val = this->bq25798_noi2c_->rawToString(raw, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting raw value to enum string for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
  }
  return string_val;
}

{%         endif %}
{# #}
{%     if def._is_rw %}
{%          if def._is_bool %}
void BQ25798Component::set_{{ def._snake_case_name }}_bool(bool value) {
  ESP_LOGD(TAG, "Setting bool {{ def.name }} to %s", value ? "true" : "false");
  uint16_t raw_value = this->bq25798_noi2c_->boolToRaw(value, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting bool to raw value for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
    return;
  }

  this->set_{{ def._snake_case_name }}_raw(raw_value);
};

{%         endif %}
{# #}
{%         if def.type == "int" %}
void BQ25798Component::set_{{ def._snake_case_name }}_int(int value) {
  ESP_LOGD(TAG, "Setting int {{ def.name }} to %d", value);
  uint16_t raw_value = this->bq25798_noi2c_->intToRaw(value, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting int to raw value for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
    return;
  }

  this->set_{{ def._snake_case_name }}_raw(raw_value);
};

{%         endif %}
{# #}
{%         if def._is_float %}
void BQ25798Component::set_{{ def._snake_case_name }}_float(float value) {
  ESP_LOGD(TAG, "Setting float {{ def.name }} to %f", value);
  uint16_t raw_value = this->bq25798_noi2c_->floatToRaw(value, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting float to raw value for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
    return;
  }  
  this->set_{{ def._snake_case_name }}_raw(raw_value);
};

{%         endif %}
{# #}
{%         if def._is_enum %}
void BQ25798Component::set_{{ def._snake_case_name }}_enum_int(int value) {
  ESP_LOGD(TAG, "Setting enum {{ def.name }} to %s (%d)", {{ def._snake_case_name }}_int_to_enum.at(value).c_str(), value);
  uint8_t raw_value = this->bq25798_noi2c_->intToRaw(value, this->bq25798_noi2c_->{{ def.name }});
  if (this->bq25798_noi2c_->lastError()) {
    this->status_set_warning("Error converting enum int to raw value for {{ def.name }}");
    this->bq25798_noi2c_->clearError();
    return;
  }
  this->set_{{ def._snake_case_name }}_raw(raw_value);
};

{%         endif %}
{%     endif -%}
{# #}
{% endfor %}

}  // namespace bq25798
}  // namespace esphome