#include "bq25798_component.h"
#include "esphome/core/log.h"
#include "esphome/core/hal.h"

namespace esphome {
namespace bq25798 {

static const char* TAG = "bq25798.component";

// FIXME
// BQ25798 bqlib = BQ25798();

void BQ25798Component::setup() {
  ESP_LOGCONFIG(TAG, "Setting up BQ25798...");

  bq25798 = new BQ25798ESPHome(this->i2c_);
  if (!bq25798->begin(this->address_)) {
    ESP_LOGE(TAG, "Failed to initialize BQ25798!");
    this->mark_failed();
    return;
  }

  //   uint16_t value;
  //   if (!this->read_byte_16(ADS1115_REGISTER_CONVERSION, &value)) {
  //     this->mark_failed();
  //     return;
  //   }
}

void BQ25798Component::dump_config() {
  ESP_LOGCONFIG(TAG, "Dumping BQ25798 configuration...");

  LOG_I2C_DEVICE(this);
  if (this->is_failed()) {
    ESP_LOGE(TAG, "Communication with BQ25798 failed!");
    return;
  }

  LOG_UPDATE_INTERVAL(this);

{%- for def in settings %}
  LOG_SENSOR("  ", "{{ def.name }}", this->{{ def.name | lower }}_);
{%- endfor %}

}

float BQ25798Component::get_setup_priority() const { return setup_priority::DATA; }

void BQ25798Component::update() {
  // FIXME ESP_LOGD(TAG, "Updating BQ25798...");

{%- for def in settings %}
  if (this->{{ def.name | lower }}_sensor_ != nullptr) {
{%-     if def.type == "bool" %}
    bool value = this->bq25798->get{{ def.name }}();
    this->{{ def.name | lower }}_sensor_->publish_state(value);
    if (this->bq25798->lastError()) {
      this->status_set_warning();
      this->bq25798->clearError();
      return;
    }
{%-     endif %}
  }
{% endfor %}
}

{%- for def in settings %}
{%-     if def.type == "bool" %}
void BQ25798Component::set_{{ def.name | lower }}(bool value) {
  ESP_LOGD(TAG, "Setting %s to %s", "{{ def.name }}", value ? "True" : "False");
  // FIXME
}
bool BQ25798Component::get_{{ def.name | lower }}() {
  ESP_LOGD(TAG, "Getting %s", "{{ def.name }}");
  return false;  // FIXME
  // FIXME
}
{%-     elif def.type == "int" %}
void BQ25798Component::set_{{ def.name | lower }}(int value) {
  ESP_LOGD(TAG, "Setting %s to %d %s", "{{ def.name }}", value, "{{ def.unit }}");
  // FIXME
}
{%-     elif def.type == "float" %}
void BQ25798Component::set_{{ def.name | lower }}(float value) {
  ESP_LOGD(TAG, "Setting %s to %f %s", "{{ def.name }}", value, "{{ def.unit }}");
  // FIXME
}
{%-     elif def.type == "enum" %}
void BQ25798Component::set_{{ def.name | lower }}(int value) {
  ESP_LOGD(TAG, "Setting %s to %d ({{ def.name }}_t)", "{{ def.name }}", value);
  // FIXME
}
{%-     endif %}
{%- endfor %}

}  // namespace bq25798
}  // namespace esphome