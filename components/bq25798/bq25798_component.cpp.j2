#include "bq25798_component.h"
#include "esphome/core/log.h"
#include "esphome/core/hal.h"

namespace esphome {
namespace bq25798 {

static const char* TAG = "bq25798.component";

void BQ25798Component::setup() {
  ESP_LOGCONFIG(TAG, "Setting up BQ25798...");

  bq25798_noi2c = new BQ25798NoI2C();
  
  bq25798_noi2c->begin(this->address_); // no-op

  uint8_t raw_value;
  if (!this->read_byte({{ settings[0].regname }}, &raw_value)) {
     this->mark_failed();
     return;
  }

  delay(1);
}

void BQ25798Component::dump_config() {
  ESP_LOGCONFIG(TAG, "Dumping BQ25798 configuration...");

  LOG_I2C_DEVICE(this);
  if (this->is_failed()) {
    ESP_LOGE(TAG, "Communication with BQ25798 failed!");
    return;
  }

  LOG_UPDATE_INTERVAL(this);

{%- for def in settings %}
// FIXME uncomment
  // LOG_SENSOR("  ", "{{ def.name }}", this->{{ def.name | lower }}_sensor_);
{%- endfor %}

}

float BQ25798Component::get_setup_priority() const { return setup_priority::DATA; }

void BQ25798Component::update() {
{%- for def in settings %}
  if (this->{{ def.name | lower }}_sensor_ != nullptr) {

{%-         if def.long_reg %}
    uint16_t raw_value;
    if (!this->read_byte_16({{ def.regname }}, &raw_value)) {
      this->mark_failed();
      return;
    }
{%-         else %}
    uint8_t raw_value;
    if (!this->read_byte({{ def.regname }}, &raw_value)) {
      this->mark_failed();
      return;
    }
{%-         endif %}

{%-     if def.type == "bool" %}
    bool value = this->bq25798_noi2c->rawToBool(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "int" %}
    int value = this->bq25798_noi2c->rawToInt(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "float" %}
    float value = this->bq25798_noi2c->rawToFloat(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "enum" %}
    const char* value = this->bq25798_noi2c->rawToString(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     endif %}
    if (this->bq25798_noi2c->lastError()) {
      this->status_set_warning();
      this->bq25798_noi2c->clearError();
      return;
    }
    this->{{ def.name | lower }}_sensor_->publish_state(value);
  }
{% endfor %}
}

{%- for def in settings %}
{%     if def.type == "bool" %}
void BQ25798Component::set_{{ def.name | lower }}(bool value) {
  ESP_LOGD(TAG, "Setting %s to %s", "{{ def.name }}", value ? "True" : "False");
  uint16_t raw_value = this->bq25798_noi2c->boolToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%     elif def.type == "int" %}
void BQ25798Component::set_{{ def.name | lower }}(int value) {
  ESP_LOGD(TAG, "Setting %s to %d %s", "{{ def.name }}", value, "{{ def.unit }}");
  uint16_t raw_value = this->bq25798_noi2c->intToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%     elif def.type == "float" %}
void BQ25798Component::set_{{ def.name | lower }}(float value) {
  ESP_LOGD(TAG, "Setting %s to %f %s", "{{ def.name }}", value, "{{ def.unit }}");
  uint16_t raw_value = this->bq25798_noi2c->floatToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%     elif def.type == "enum" %}
void BQ25798Component::set_{{ def.name | lower }}(int value) {
  ESP_LOGD(TAG, "Setting %s to %d ({{ def.name }}_t)", "{{ def.name }}", value);
  uint8_t raw_value = this->bq25798_noi2c->intToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%-     endif %}

{%-         if def.long_reg %}
  if (!this->write_byte_16({{ def.regname }}, raw_value)) {
    this->mark_failed();
  }
{%-         else %}
  if (!this->write_byte({{ def.regname }}, raw_value)) {
    this->mark_failed();
  }
{%-         endif %}
};

{%- endfor %}

}  // namespace bq25798
}  // namespace esphome