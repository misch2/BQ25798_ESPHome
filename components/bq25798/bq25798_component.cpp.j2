#include "bq25798_component.h"
#include "esphome/core/log.h"
#include "esphome/core/hal.h"

namespace esphome {
namespace bq25798 {

static const char* TAG = "bq25798.component";

void BQ25798Component::setup() {
  ESP_LOGCONFIG(TAG, "Setting up BQ25798...");

  bq25798_noi2c = new BQ25798NoI2C();
  bq25798_noi2c->begin(this->address_); // no-op

  // FIXME reset the chip?

  uint8_t raw_value;
  if (!this->read_byte({{ settings[0].regname }}, &raw_value)) {
    ESP_LOGE(TAG, "Failed to read from BQ25798 at address 0x%02X", this->address_);
     this->mark_failed();
     return;
  }
  // ^FIXME Maybe check chip ID instead?

{%- for def in settings %}
{%-     if def.mode == "rw" %}
  if (on_init_set_{{ def.name | lower }}_) {
    set_{{ def.name | lower }}({{ def.name | lower }}_, true);
  }
{%-     endif %}
{%- endfor %}

  ESP_LOGCONFIG(TAG, "BQ25798 initialized successfully at address 0x%02X", this->address_);

  delay(1);
}

void BQ25798Component::dump_config() {
  ESP_LOGCONFIG(TAG, "Dumping BQ25798 configuration...");
  LOG_I2C_DEVICE(this);
  if (this->is_failed()) {
    return;
  }
  LOG_UPDATE_INTERVAL(this);

  // Dump all the sensors enabled in YAML config
{%- for def in settings %}
{%-     if def.type == "int" or def.type == "float" or def.type == "enum"  %}
  LOG_SENSOR("  ", "{{ def.name }}", this->{{ def.name | lower }}_sensor_);
{%-     elif def.type == "bool" %}
  LOG_BINARY_SENSOR("  ", "{{ def.name }}", this->{{ def.name | lower }}_sensor_);
{%-     endif %}
{%- endfor %}

}

float BQ25798Component::get_setup_priority() const { return setup_priority::DATA; }

void BQ25798Component::update() {
{%- for def in settings %}

  if (this->{{ def.name | lower }}_sensor_ != nullptr) {

{%-         if def.long_reg %}
    uint16_t raw_value;
    if (!this->read_byte_16({{ def.regname }}, &raw_value)) {
      this->mark_failed();
      return;
    }
{%-         else %}
    uint8_t raw_value;
    if (!this->read_byte({{ def.regname }}, &raw_value)) {
      this->mark_failed();
      return;
    }
{%-         endif %}

{%-     if def.type == "bool" %}
    bool value = this->bq25798_noi2c->rawToBool(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "int" %}
    int value = this->bq25798_noi2c->rawToInt(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "float" %}
    float value = this->bq25798_noi2c->rawToFloat(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     elif def.type == "enum" %}
    // exception: process both int and string values
    const char* string_value = this->bq25798_noi2c->rawToString(raw_value, this->bq25798_noi2c->{{ def.name }});
    if (this->bq25798_noi2c->lastError()) {
      this->status_set_warning();
      this->bq25798_noi2c->clearError();
      return;
    }
    this->{{ def.name | lower }}_text_sensor_->publish_state(string_value);
    int value = this->bq25798_noi2c->rawToInt(raw_value, this->bq25798_noi2c->{{ def.name }});
{%-     endif %}

    if (this->bq25798_noi2c->lastError()) {
      this->status_set_warning();
      this->bq25798_noi2c->clearError();
      return;
    }
    this->{{ def.name | lower }}_sensor_->publish_state(value);
  }

{% endfor %}
}

{%- for def in settings %}
{%-     if def.mode == "rw" %}

void BQ25798Component::on_init_set_{{ def.name | lower }}(bool value) {
  on_init_set_{{ def.name | lower }}_ = value;
}

{%          if def.type == "bool" %}
void BQ25798Component::set_{{ def.name | lower }}(bool value, bool write_to_i2c) {
  bool _write = write_to_i2c && this->bq25798_noi2c != nullptr;
  ESP_LOGD(TAG, "%s {{ def.name }} to %s", _write ? "Setting and writing" : "Will eventually set", value ? "True" : "False");
  {{ def.name | lower }}_ = value;
  if (_write) {
    uint16_t raw_value = this->bq25798_noi2c->boolToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%         elif def.type == "int" %}
void BQ25798Component::set_{{ def.name | lower }}(int value, bool write_to_i2c) {
  bool _write = write_to_i2c && this->bq25798_noi2c != nullptr;
  ESP_LOGD(TAG, "%s {{ def.name }} to %d {{ def.unit }}", _write ? "Setting and writing" : "Will eventually set", value);
  {{ def.name | lower }}_ = value;
  if (_write) {
    uint16_t raw_value = this->bq25798_noi2c->intToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%         elif def.type == "float" %}
void BQ25798Component::set_{{ def.name | lower }}(float value, bool write_to_i2c) {
  bool _write = write_to_i2c && this->bq25798_noi2c != nullptr;
  ESP_LOGD(TAG, "%s {{ def.name }} to %f {{ def.unit }}", _write ? "Setting and writing" : "Will eventually set", value);
  {{ def.name | lower }}_ = value;
  if (_write) {
    uint16_t raw_value = this->bq25798_noi2c->floatToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%         elif def.type == "enum" %}
void BQ25798Component::set_{{ def.name | lower }}(int value, bool write_to_i2c) {
  bool _write = write_to_i2c && this->bq25798_noi2c != nullptr;
  ESP_LOGD(TAG, "%s {{ def.name }} to %d (<{{ def.name }}_t>)", _write ? "Setting and writing" : "Will eventually set", value);
  {{ def.name | lower }}_ = value;
  if (_write) {
    uint8_t raw_value = this->bq25798_noi2c->intToRaw(value, this->bq25798_noi2c->{{ def.name }});
{%-         endif %}

{%-         if def.long_reg %}
  if (!this->write_byte_16({{ def.regname }}, raw_value)) {
    this->mark_failed();
  }
{%-         else %}
  if (!this->write_byte({{ def.regname }}, raw_value)) {
    this->mark_failed();
  }
{%-         endif %}
  } // if (write_to_i2c && this->bq25798_noi2c != nullptr)
};  // function end

{%-     endif %}

{%- endfor %}

}  // namespace bq25798
}  // namespace esphome