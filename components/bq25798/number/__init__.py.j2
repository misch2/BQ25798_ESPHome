{% include "/globals.j2" %}

import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import number
from esphome.const import (
    CONF_ID,
    ENTITY_CATEGORY_CONFIG,
)

from .. import (
    CONF_BQ25798_ID,
    bq25798_ns,
    BQ25798Component
)

DEPENDENCIES = ["bq25798"]


# Numeric settings
{% for def in settings %}
{%     if (def._is_int or def._is_float) and def._is_rw %}
{% set className = 'BQ25798' ~ def._CamelCaseName ~ 'Number' %}

{{ className }} = bq25798_ns.class_("{{ className }}", number.Number, cg.PollingComponent)
CONF_BQ25798_{{ def._UPPERCASE_NAME }} = "{{ def._snake_case_name }}"
{%     endif %}
{% endfor %}

CONFIG_SCHEMA = (
    number.number_schema(BQ25798Component)
    .extend({
            cv.GenerateID(CONF_BQ25798_ID): cv.use_id(BQ25798Component),

{% for def in settings %}
{%     if (def._is_int or def._is_float) and def._is_rw %}
{%         set className = 'BQ25798' ~ def._CamelCaseName ~ 'Number' %}
            cv.Optional(CONF_BQ25798_{{ def._UPPERCASE_NAME }}): number.number_schema(
                {{ className }},
                unit_of_measurement="{{ def.unit }}",
                entity_category=ENTITY_CATEGORY_CONFIG,
            ),
{%     endif %}
{% endfor %}
    })
    .extend(cv.polling_component_schema("5s"))
)

async def to_code(config):
    main_component = await cg.get_variable(config[CONF_BQ25798_ID]) # parent component

    # Numbers
{% for def in settings %}
{%     if (def._is_int or def._is_float) and def._is_rw %}
    if {{ def._snake_case_name }}_config := config.get(CONF_BQ25798_{{ def._UPPERCASE_NAME }}):
        num = await number.new_number(
            {{ def._snake_case_name }}_config,
            min_value={{ def.range_low }},
            max_value={{ def.range_high }},
            step={{ def.bit_step_size }},
        )
        await cg.register_parented(num, config[CONF_BQ25798_ID])
        await cg.register_component(num, config)
{%     endif %}
{% endfor %}
